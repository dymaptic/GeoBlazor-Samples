@page "/buffer"
@using dymaptic.GeoBlazor.Core.Model
@inject GeometryEngine GeometryEngine

<PageTitle>Buffer</PageTitle>

<h1>Buffer a point and add the circle (buffer) and the point to the map</h1>

@* Full world map to show off buffer generation *@
<MapView @ref="_mapView" Longitude="0" Latitude="0" Zoom="3" Style="height: 600px; width: 1200px;">
    <Map>
        <Basemap>
            <BasemapStyle Name="BasemapStyleName.ArcgisTopographic" />
        </Basemap>
    </Map>
</MapView>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            // Create a point on Rome, Italy (lat: 41.9102083, long: 12.3708505)
            Point point = new Point(x: 12.3708505, y: 41.910283, spatialReference: SpatialReference.Wgs84);

            // Buffer the point by 1000km
            // Note that b/c we use WGS84, we need to use the GeodesicBuffer method. The plain `Buffer` method should be used with planar coordinate systems
            Polygon buffer = await GeometryEngine.GeodesicBuffer(point, 1000, LinearUnit.Kilometers);

            // Create a Red dot symbol
            SimpleMarkerSymbol pointSymbol = new SimpleMarkerSymbol(new Outline(new MapColor("#E24E42"), 0), new MapColor("#E24E42"), 10, SimpleMarkerStyle.Circle);

            // Create a blue circle symbol
            SimpleFillSymbol circleSymbol = new SimpleFillSymbol(new Outline(new MapColor("#1D809F"), 2), new MapColor("#1D809F"));

            // Create the graphic
            Graphic bufferGraphic = new Graphic(buffer, circleSymbol);
            Graphic pointGraphic = new Graphic(point, pointSymbol);

            // Add it to the map
            await _mapView!.AddGraphic(bufferGraphic);
            await _mapView.AddGraphic(pointGraphic);
        }
    }

    private MapView? _mapView;

}