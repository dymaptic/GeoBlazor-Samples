@page "/"
@using dymaptic.GeoBlazor.Core.Events

@inject Projection Projection
@inject GeometryEngine GeometryEngine
@inject IJSRuntime JsRuntime

<h1>Day/Night Terminator</h1>

<label><a target="_blank" href="https://github.com/dymaptic/GeoBlazor-Samples/tree/main/SolarTracker">Source Code</a></label>

<div style="margin-bottom: 1rem;">
    <div class="form-group">
        <label>
            Date:
            <input type="date" 
                   value="@_selectedDateTime.ToString("yyyy-MM-dd")" @onchange="UpdateDate" />
        </label>
        <label>
            Time:
            <input style="width: 96px;" type="time" 
                   value="@_selectedDateTime.ToString("HH:mm")" @onchange="UpdateTime" />
        </label>
    </div>
    <div class="form-group">
        @if (_timeZonesLoaded)
        {
            <select @onchange="UpdateTimeZone">
                @foreach (var tzi in _timeZoneInfos)
                {
                    <option selected="@tzi.Equals(_timeZoneInfo)" value="@tzi.Id">@tzi.DisplayName</option>
                }
            </select>
            <label>
                Time Zone: UTC @(_timeZoneOffset.Hours.ToString("D2")):@(_timeZoneOffset.Minutes.ToString("D2"))
                @if (_timeZoneInfo?.IsDaylightSavingTime(_selectedDateTime) == true)
                {
                    <span class="daylight-savings">Daylight Savings</span>
                }
            </label>
        }
        else
        {
            <label>Loading Time Zones...</label>
        }
    </div>
    <div class="form-group">
        @if (_focusPoint is not null)
        {
            <label>
                Focus: @_focusPoint.Longitude!.Value.ToString("N6") Longitude / @_focusPoint.Latitude!.Value.ToString("N6") Latitude
            </label>
        }
        else
        {
            <label>Finding Focus...</label>
        }
    </div>
    <div class="form-group">
        @if (_focusPoint is not null && _polygon is not null)
        {
            <button type="button" disabled="@(!_isNightTime || _movingToSunrise || _movingToSunset)" 
                    @onclick="GoToSunrise">Next Sunrise</button>
            <button type="button" disabled="@(_isNightTime || _movingToSunrise || _movingToSunset)" 
                    @onclick="GoToSunset">Next Sunset</button>
            <label>
                Skip Interval (in Minutes):
                <input type="number" step="1" @bind="_skipInterval"/>
            </label>
            <button type="button" disabled="@(!_movingToSunrise && !_movingToSunset)" 
                    @onclick="() => _cancel = true">Cancel</button>
        }
        else
        {
            <label>&nbsp;</label>
        }
    </div>
    <div class="form-group">
        <label>@Message</label>
    </div>
</div>
<MapView @ref="_mapView" Style="height: 600px; width: 100%;" Zoom="1.5"
         OnViewRendered="OnViewRendered"
         OnClick="SetFocusPoint">
    <Map>
        <Basemap>
            <BasemapStyle Name="BasemapStyleName.ArcgisStreets" />
        </Basemap>
        <GraphicsLayer @ref="_graphicsLayer" />
    </Map>
    <LocateWidget GoToOverride="GoToOverride"
                  Position="OverlayPosition.TopLeft" />
    <SearchWidget GoToOverride="GoToOverride"
                  Position="OverlayPosition.TopRight" />
</MapView>

@code {

    protected override async Task OnInitializedAsync()
    {
        CalculateDeclinations();
        await FetchTimeZoneData();
    }

    private async Task OnViewRendered()
    {
        if (!_terminusAdded)
        {
            await CreateTerminator();
            _terminusAdded = true;
            _terminus = new Graphic(_polygon!,
                new SimpleFillSymbol(new Outline(new MapColor(0, 0, 0, 0)),
                    new MapColor(0, 0, 0, 0.3), FillStyle.Solid));
            await _graphicsLayer!.Add(_terminus);
            await JsRuntime.InvokeVoidAsync("removeLoadingCursor");
        }
        else if (_cancel)
        {
            _cancel = false;
            _movingToSunrise = false;
            _movingToSunset = false;
            await JsRuntime.InvokeVoidAsync("removeLoadingCursor");
        }
        else if (_movingToSunrise)
        {
            if (!await GeometryEngine.Intersects(_focusPoint!, _polygon!))
            {
                await MoveTimeUntilStateChanged((int)(_skipInterval / 2.0), false, false);
                _movingToSunrise = false;
            }
            else
            {
                _selectedDateTime = _selectedDateTime.AddMinutes(_skipInterval);
                await CreateTerminator();
            }
            await UpdateGraphic();
        }
        else if (_movingToSunset)
        {
            if (await GeometryEngine.Intersects(_focusPoint!, _polygon!))
            {
                await MoveTimeUntilStateChanged((int)(_skipInterval / 2.0), false, true);
                _movingToSunset = false;
            }
            else
            {
                _selectedDateTime = _selectedDateTime.AddMinutes(_skipInterval);
                await CreateTerminator();
            }
            await UpdateGraphic();
        }
        if (_focusGraphic is null)
        {
            _focusPoint = await _mapView!.GetCenter();
            _focusGraphic = new Graphic(_focusPoint, _focusSymbol);
            await _mapView.AddGraphic(_focusGraphic);
            await GetTimeZone();
        }
    }

    private async Task CreateTerminator()
    {
        // code adapted from https://github.com/jgravois/midnight-commander/blob/master/js/SolarTerminator.js
        int ordinalDay = _selectedDateTime.DayOfYear;
        double solarDeclination = _declinationPerDay[ordinalDay];
        double yMax = 85;
        double latitude = yMax * (solarDeclination > 0 ? -1 : 1);
        List<MapPath> rings = new();
        DateTime utcDateTime = _selectedDateTime.Subtract(_timeZoneOffset);
        
        double lt = utcDateTime.Hour + utcDateTime.Minute / 60.0 + utcDateTime.Second / 3600.0;
        double tau = 15 * (lt - 12);
        
        for (double lon = -180; lon < 180; lon++)
        {
            MapPath path = new(new(lon + 1, latitude), 
                new(lon, latitude), 
                new(lon, 
                    GetLatitude(lon, solarDeclination, -yMax, yMax, tau)), 
                new(lon + 1, GetLatitude(lon, solarDeclination, -yMax, yMax, tau)),
                new(lon + 1, latitude));

            rings.Add(path);
        }
        
        _polygon = new Polygon(rings.ToArray(), SpatialReference.Wgs84);
        _polygon = (Polygon)(await Projection.Project(_polygon, SpatialReference.WebMercator))!;
    }

    private async Task UpdateGraphic()
    {
        await _terminus!.SetGeometry(_polygon!);
    }

    private double GetLatitude(double longitude, double solarDeclination, double yMin, double yMax, double tau)
    {
        longitude += tau;
        double tanLat = -Math.Cos(longitude * K) / Math.Tan(solarDeclination * K);
        double arctanLat = Math.Atan(tanLat) / K;
        return Math.Max(Math.Min(arctanLat, yMax), yMin);
    }
    

    private async Task UpdateDate(ChangeEventArgs arg)
    {
        string[]? dateSegments = arg.Value?.ToString()?.Split('-');
        if (dateSegments is null || dateSegments.Length != 3) return;
        int year = int.Parse(dateSegments[0]);
        int month = int.Parse(dateSegments[1]);
        int day = int.Parse(dateSegments[2]);
        _selectedDateTime = new DateTime(year, month, day, _selectedDateTime.Hour, _selectedDateTime.Minute, 0);
        _terminusAdded = false;
        await OnViewRendered();
    }

    private async Task UpdateTime(ChangeEventArgs arg)
    {
        string[]? timeSegments = arg.Value?.ToString()?.Split(':');
        if (timeSegments is null || timeSegments.Length < 2) return;
        int hour = int.Parse(timeSegments[0]);
        int minutes = int.Parse(timeSegments[1]);
        _selectedDateTime = new DateTime(_selectedDateTime.Year, _selectedDateTime.Month, _selectedDateTime.Day, hour, minutes, 0);
        _terminusAdded = false;
        await OnViewRendered();
    }
    
    private void UpdateTimeZone(ChangeEventArgs arg)
    {
        _selectedDateTime = _selectedDateTime.Add(-_timeZoneOffset);
        string? timeZoneId = arg.Value?.ToString();
        if (timeZoneId is null) return;
        _timeZoneInfo = _timeZoneInfos.FirstOrDefault(tzi => tzi.Id == timeZoneId);
        if (_timeZoneInfo is null) return;
        _timeZoneOffset = _timeZoneInfo.GetUtcOffset(_selectedDateTime);
        _selectedDateTime = _selectedDateTime.Add(_timeZoneOffset);
    }

    private async Task GoToSunrise()
    {
        await JsRuntime.InvokeVoidAsync("setLoadingCursor");
        _movingToSunrise = true;
        _selectedDateTime = _selectedDateTime.AddMinutes(_skipInterval);
        await OnViewRendered();
    }

    private async Task GoToSunset()
    {
        await JsRuntime.InvokeVoidAsync("setLoadingCursor");
        _movingToSunset = true;
        _selectedDateTime = _selectedDateTime.AddMinutes(_skipInterval);
        await OnViewRendered();
    }

    private async Task MoveTimeUntilStateChanged(int minutesInterval, bool forward, bool isIntersected)
    {
        _selectedDateTime = _selectedDateTime.AddMinutes(forward ? minutesInterval : -minutesInterval);
        await CreateTerminator();
        bool nextDirection = forward;
        bool nextIntersected = isIntersected;
        if (isIntersected != await GeometryEngine.Intersects(_focusPoint!, _polygon!))
        {
            _adjusting = true;
            StateHasChanged();
            nextDirection = !forward;
            nextIntersected = !isIntersected;
        }

        if (minutesInterval > 1)
        {
            await MoveTimeUntilStateChanged((int)(minutesInterval / 2.0), nextDirection, nextIntersected);
        }
        else
        {
            _isNightTime = !_isNightTime;
            _adjusting = false;
            await JsRuntime.InvokeVoidAsync("removeLoadingCursor");
        }
    }

    private async Task FetchTimeZoneData()
    {
        try
        {
            var client = new HttpClient();
            HttpResponseMessage result = await client.GetAsync(TimeZoneServiceUrl);
            TimeZoneData data = (await result.Content.ReadFromJsonAsync<TimeZoneData>())!;
            _timeZoneData.AddRange(data.Features);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        _timeZonesLoaded = true;
    }

    private void CalculateDeclinations()
    {
        for (int i = 1; i < 366; i++)
        {
            double solarDeclination = -57.295779 * 
                                      Math.Asin(0.397788 * 
                                                Math.Cos(0.017203 * 
                                                    (i + 10) + 0.052465 * 
                                                    Math.Sin(0.017203 * (i - 2))));
            _declinationPerDay[i] = solarDeclination;
        }
    }

    private async Task SetFocusPoint(ClickEvent clickEvent)
    {
        _focusPoint = clickEvent.MapPoint;
        await _focusGraphic!.SetGeometry(_focusPoint);
        await GetTimeZone();
    }

    private async Task GetTimeZone()
    {
        await JsRuntime.InvokeVoidAsync("setLoadingCursor");
        if (_polygon is not null)
        {
            _isNightTime = await GeometryEngine.Intersects(_focusPoint!, _polygon!);
        }
        
        if (!_timeZonesLoaded || _focusPoint is null) return;
        foreach (TimeZone tz in _timeZoneData)
        {
            if (await GeometryEngine.Intersects(_focusPoint!, tz.Geometry))
            {
                _selectedDateTime = _selectedDateTime.Add(-_timeZoneOffset);
                _timeZoneOffset = TimeSpan.FromHours(tz.Attributes.Zone);
                _timeZoneInfo = _timeZoneInfos.First(tzi => tzi.BaseUtcOffset == _timeZoneOffset);
                _timeZoneOffset = _timeZoneInfo.GetUtcOffset(_selectedDateTime);
                _selectedDateTime = _selectedDateTime.Add(_timeZoneOffset);
                break;
            }
        }
        await JsRuntime.InvokeVoidAsync("removeLoadingCursor");
    }
   
    
    private async void GoToOverride(GoToOverrideParameters parameters)
    {
        if (parameters.Target.TargetGeometry is Point point)
        {
            _focusPoint = point;
        }
        else
        {
            Extent extent = parameters.Target.TargetGraphic!.Geometry!.Extent!;
            _focusPoint = await GeometryEngine.GetExtentCenter(extent);
        }
        
        await _mapView!.SetCenter(_focusPoint!);
        await _focusGraphic!.SetGeometry(_focusPoint!);
        await GetTimeZone();
    }

    private string Message => _adjusting 
        ? "Correcting..." 
        : _movingToSunrise
            ? "Progressing to next Sunrise..."
            : _movingToSunset
                ? "Progressing to next Sunset..."
                : _terminusAdded
                    ? "Click on the map, use the Locator Widget, or search to select a location. Then use the buttons above to find sunrise/sunset." : "Calculating Terminator...";
    
    private MapView? _mapView;
    private GraphicsLayer? _graphicsLayer;
    private DateTime _selectedDateTime = DateTime.UtcNow;
    private Point? _focusPoint;
    private Polygon? _polygon;
    private Graphic? _terminus;
    private readonly SimpleMarkerSymbol _focusSymbol = new(new Outline(new MapColor(0, 0, 0, 0)),
        new MapColor(255, 0, 0, 0.5), 10, SimpleMarkerStyle.Circle);

    private Graphic? _focusGraphic;
    private TimeSpan _timeZoneOffset = TimeSpan.Zero;
    private TimeZoneInfo? _timeZoneInfo;
    private bool _movingToSunrise;
    private bool _movingToSunset;
    private bool _adjusting;
    private bool _terminusAdded;
    private bool _cancel;
    private bool _timeZonesLoaded;
    private bool _isNightTime;
    private int _skipInterval = 30;
    private readonly List<TimeZone> _timeZoneData = [];
    private readonly IReadOnlyList<TimeZoneInfo> _timeZoneInfos = TimeZoneInfo.GetSystemTimeZones();
    private const double K = Math.PI / 180;
    private readonly Dictionary<int, double> _declinationPerDay = [];
    private const string TimeZoneServiceUrl = 
        "https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/World_Time_Zones/FeatureServer/0//query?where=1%3D1&outFields=*&f=json";

}