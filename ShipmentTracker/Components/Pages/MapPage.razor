@page "/map"
@using Point = dymaptic.GeoBlazor.Core.Components.Geometries.Point
<h1>Map</h1>

<MapView Class="map-view" OnViewRendered="OnViewRendered"
         Longitude="-100" Latitude="40"
         Zoom="3"
         OnLayerViewCreate="OnLayerViewCreate">
    <Map ArcGISDefaultBasemap="streets">
        <GraphicsLayer @ref="_graphicsLayer">
            
        </GraphicsLayer>
        <FeatureLayer Url="https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/NDFD_Precipitation_v1/FeatureServer/0"
                      @ref="_weatherLayer" />
    </Map>
    <ExpandWidget Position="OverlayPosition.BottomLeft">
        <GraphicsLegendWidget Label="Shipments"
                              GraphicLabelTemplate="{Category}"
                              GroupBySymbol="true"
                              SelectGraphics="true"
                              ToggleGraphics="true" />
    </ExpandWidget>
    <LayerListWidget Position="OverlayPosition.TopRight" />
    <TimeSliderWidget @ref="_timeSliderWidget" Loop="true" Mode="TimeSliderMode.TimeWindow">
        <TickConfig Mode="TickConfigMode.Percent" Values="new List<double>{ 12.5, 37.5, 62.5, 87.5}"></TickConfig>
    </TimeSliderWidget>
</MapView>

@code {
    [Inject] public required Repository Repository { get; set; }

    protected override void OnInitialized()
    {
        _shipments = Repository.GetShipments();
        foreach (var shipment in _shipments)
        {
            Point location = new(shipment.Longitude, shipment.Latitude);
            Symbol symbol = new SimpleMarkerSymbol(new Outline(new MapColor("black"), 1), 
                CategoryColors.AllColors[shipment.Category]);
            PopupTemplate popupTemplate = new("{Name}",
                contents:
                [
                    new FieldsPopupContent(
                    [
                        new FieldInfo("Category"),
                        new FieldInfo("SubCategory"),
                        new FieldInfo("Latitude"),
                        new FieldInfo("Longitude"),
                        new FieldInfo("Quantity"),
                        new FieldInfo("Weight")
                    ])
                ]);
            AttributesDictionary attributes = new(new Dictionary<string, object>
            {
                { "OBJECT_ID", shipment.Id },
                { "Category", shipment.Category },
                { "SubCategory", shipment.SubCategory },
                { "Name", shipment.Name },
                { "Latitude", shipment.Latitude },
                { "Longitude", shipment.Longitude },
                { "Quantity", shipment.Quantity },
                { "Weight", shipment.Weight }
            });
            
            Graphic graphic = new(location, symbol, popupTemplate, attributes);
            _shipmentGraphics.Add(graphic);
        }
    }

    private async Task OnViewRendered()
    {
        if (_graphicsAdded) return;

        _graphicsAdded = true;
        await _graphicsLayer!.Add(_shipmentGraphics);
    }

    private async void OnLayerViewCreate(LayerViewCreateEvent createEvent)
    {
        if (createEvent.Layer?.Id != _weatherLayer?.Id) return;

        await _timeSliderWidget?.SetFullTimeExtent(_weatherLayer!.TimeInfo!.FullTimeExtent!)!;

        await _timeSliderWidget.SetStops(new TimeSliderStop
        {
            Type = TimeSliderStops.StopsByInterval,
            Interval = _weatherLayer!.TimeInfo?.Interval
        });

    }

    private List<Shipment> _shipments = [];
    private readonly List<Graphic> _shipmentGraphics = [];
    private GraphicsLayer? _graphicsLayer;
    private FeatureLayer? _weatherLayer;
    private TimeSliderWidget? _timeSliderWidget;
    private bool _graphicsAdded;
}